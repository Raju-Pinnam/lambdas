AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Template for the IAM ttcvpay Resources'
Parameters:
  Password:
    NoEcho: 'true'
    Type: String
    Description: New account password
    MinLength: '1'
    MaxLength: '41'
    ConstraintDescription: the password must be between 1 and 41 characters
    Default: "Admin@123456"
  apiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[a-z0-9]+$"
    Default: "v1"
Resources:
  RajuUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref Password
        PasswordResetRequired: false
      UserName: 'padmaraju'
  RajuUserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: 'RajuUserGroup'
  RajuUsers:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref RajuUserGroup
      Users: [!Ref RajuUser]
  RajuUserPolicies:
    DependsOn: RajuUserGroup
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RajuPolices
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action: ['cloudformation:*']
          Resource: '*'
        - Effect: Allow
          Action: ['iam:*']
          Resource: '*'
        - Effect: Allow
          Action: ['cloudfront:*']
          Resource: '*'
        - Effect: Allow
          Action: ["apigateway:*"]
          Resource: ["arn:aws:apigateway:*::/*"]
        - Effect: Allow
          Action: ['s3:GetAccessPoint',
                's3:PutAccountPublicAccessBlock',
                's3:GetAccountPublicAccessBlock',
                's3:ListAllMyBuckets',
                's3:ListAccessPoints',
                's3:ListJobs',
                's3:CreateJob',
                's3:HeadBucket']
          Resource: '*'
        - Effect: Allow
          Action: ['s3:*']
          Resource: '*'
        - Effect: Allow
          Action: ['secretsmanager:*']
          Resource: '*'
        - Effect: Allow
          Action: ["lambda:ListFunctions",
                "lambda:ListEventSourceMappings",
                "lambda:ListLayerVersions",
                "lambda:ListLayers",
                "lambda:GetAccountSettings",
                "lambda:CreateEventSourceMapping",
                "tag:GetResources"]
          Resource: '*'
        - Effect: Allow
          Action: ["lambda:*"]
          Resource: 'arn:aws:lambda:*:*:layer:*' 
        - Effect: Allow
          Action: ["lambda:*"]
          Resource: ["arn:aws:lambda:*:*:function:*","arn:aws:lambda:*:*:layer:*:*"]
        - Effect: Allow
          Action: ['ses:*']
          Resource: '*'
        - Effect: Allow
          Action: ['dynamodb:*']
          Resource: '*'
        - Effect: Allow
          Action: ["cognito-identity:*",
                "cognito-idp:*",
                "cognito-sync:*",
                "iam:ListRoles",
                "iam:ListOpenIdConnectProviders",
                "sns:ListPlatformApplications"]
          Resource: '*'
        - Effect: Allow
          Action: ['cloudwatch:*',"logs:*"]
          Resource: '*'
        - Effect: Allow
          Action: ['acm:*']
          Resource: '*'
        - Effect: Allow
          Action: ['iam:GetAccountPasswordPolicy']
          Resource: '*'
        - Effect: Allow
          Action: ['iam:ChangePassword']
          Resource: 'arn:aws:iam::*:user/${aws:username}'
      Groups: [!Ref 'RajuUserGroup']
  # RajuKeys:
  #   Type: AWS::IAM::AccessKey
  #   Properties:
  #     UserName: 'padmaraju'
  RajuLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "RajuLambdaAllServicesPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: ["s3:*",
                      "autoscaling:Describe*",
                      "cloudwatch:*",
                      "cloudfront:*",
                      "cloudformation:*",
                      "lambda:*",
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents",
                      "ec2:CreateNetworkInterface",
                      "ec2:DescribeNetworkInterfaces",
                      "ec2:DeleteNetworkInterface",
                      "ec2:AssignPrivateIpAddresses",
                      "ec2:UnassignPrivateIpAddresses",
                      "logs:*",
                      "sns:*",
                      "iam:*",
                      "iam:GetPolicy",
                      "iam:GetPolicyVersion",
                      "iam:GetRole",
                      "ses:*",
                      "dynamodb:*",
                      "cognito-identity:*",
                      "cognito-idp:*",
                      "cognito-sync:*",
                      "iam:ListRoles",
                      "iam:ListOpenIdConnectProviders",
                      "rds:*",
                      "ssm:GetParameter",
                      "secretsmanager:*"]
                Resource: "*"
  Rajuapidynamorole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "RajuapidynamorolePolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: ["logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:DescribeLogGroups",
                      "logs:DescribeLogStreams",
                      "logs:PutLogEvents",
                      "logs:GetLogEvents",
                      "logs:FilterLogEvents",
                      "dynamodb:*",
                      "dax:*",
                      "application-autoscaling:DeleteScalingPolicy",
                      "application-autoscaling:DeregisterScalableTarget",
                      "application-autoscaling:DescribeScalableTargets",
                      "application-autoscaling:DescribeScalingActivities",
                      "application-autoscaling:DescribeScalingPolicies",
                      "application-autoscaling:PutScalingPolicy",
                      "application-autoscaling:RegisterScalableTarget",
                      "cloudwatch:DeleteAlarms",
                      "cloudwatch:DescribeAlarmHistory",
                      "cloudwatch:DescribeAlarms",
                      "cloudwatch:DescribeAlarmsForMetric",
                      "cloudwatch:GetMetricStatistics",
                      "cloudwatch:ListMetrics",
                      "cloudwatch:PutMetricAlarm",
                      "cloudwatch:GetMetricData",
                      "datapipeline:ActivatePipeline",
                      "datapipeline:CreatePipeline",
                      "datapipeline:DeletePipeline",
                      "datapipeline:DescribeObjects",
                      "datapipeline:DescribePipelines",
                      "datapipeline:GetPipelineDefinition",
                      "datapipeline:ListPipelines",
                      "datapipeline:PutPipelineDefinition",
                      "datapipeline:QueryObjects",
                      "ec2:DescribeVpcs",
                      "ec2:DescribeSubnets",
                      "ec2:DescribeSecurityGroups",
                      "iam:GetRole",
                      "iam:ListRoles",
                      "kms:DescribeKey",
                      "kms:ListAliases",
                      "sns:CreateTopic",
                      "sns:DeleteTopic",
                      "sns:ListSubscriptions",
                      "sns:ListSubscriptionsByTopic",
                      "sns:ListTopics",
                      "sns:Subscribe",
                      "sns:Unsubscribe",
                      "sns:SetTopicAttributes",
                      "lambda:CreateFunction",
                      "lambda:ListFunctions",
                      "lambda:ListEventSourceMappings",
                      "lambda:CreateEventSourceMapping",
                      "lambda:DeleteEventSourceMapping",
                      "lambda:GetFunctionConfiguration",
                      "lambda:DeleteFunction",
                      "resource-groups:ListGroups",
                      "resource-groups:ListGroupResources",
                      "resource-groups:GetGroup",
                      "resource-groups:GetGroupQuery",
                      "resource-groups:DeleteGroup",
                      "resource-groups:CreateGroup",
                      "tag:GetResources",
                      "kinesis:ListStreams",
                      "kinesis:DescribeStream",
                      "kinesis:DescribeStreamSummary"]
                Resource: "*"
  RajuApiLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "RajulambdaAuthPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                - lambda:InvokeFunction
                Resource: "*"
Outputs:
  RajuLambdaRoleARN:
    Value: !GetAtt "RajuLambdaRole.Arn"
    Export:
      Name: "RajuLambdaRoleArn::Id"
  RajuapidynamoroleARN:
    Value: !GetAtt "Rajuapidynamorole.Arn"
    Export:
      Name: "RajuapidynamoroleArn::Id"
  RajuApiLambdaRoleARN:
    Value: !GetAtt "RajuApiLambdaRole.Arn"
    Export:
      Name: "RajuApiLambdaRoleArn::Id"