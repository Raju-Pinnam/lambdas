AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Metadata:
  License: Apache-2.0
Description: 'AWS SAM Template for the IAM Resources'
Parameters:
  Password:
    NoEcho: 'true'
    Type: String
    Description: New account password
    MinLength: '1'
    MaxLength: '41'
    ConstraintDescription: the password must be between 1 and 41 characters
    Default: "Admin@123456"
  apiGatewayStageName:
    Type: String
    AllowedPattern: "^[a-z0-9]+$"
    Default: "v1"
Resources:
  RajuUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref Password
        PasswordResetRequired: false
      UserName: 'padmaraju'

  RajuUserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: 'RajuUserGroup'

  RajuUsers:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref RajuUserGroup
      Users: 
        - !Ref RajuUser

  RajuUserPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RajuPolices
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - 'cloudformation:*'
              - 'iam:*'
              - 'cloudfront:*'
              - 'apigateway:*'
              - 's3:GetAccessPoint'
              - 's3:PutAccountPublicAccessBlock'
              - 's3:GetAccountPublicAccessBlock'
              - 's3:ListAllMyBuckets'
              - 's3:ListAccessPoints'
              - 's3:ListJobs'
              - 's3:CreateJob'
              - 's3:HeadBucket'
              - 's3:*'
              - 'secretsmanager:*'
              - 'lambda:ListFunctions'
              - 'lambda:ListEventSourceMappings'
              - 'lambda:ListLayerVersions'
              - 'lambda:ListLayers'
              - 'lambda:GetAccountSettings'
              - 'lambda:CreateEventSourceMapping'
              - 'tag:GetResources'
              - 'lambda:*'
              - 'ses:*'
              - 'dynamodb:*'
              - 'cognito-identity:*'
              - 'cognito-idp:*'
              - 'cognito-sync:*'
              - 'cloudwatch:*'
              - 'logs:*'
              - 'acm:*'
              - 'iam:GetAccountPasswordPolicy'
              - 'iam:ChangePassword'
            Resource: "*"
      Groups:
        - !Ref RajuUserGroup

  RajuLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "RajuLambdaAllServicesPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "s3:*"
                  - "autoscaling:Describe*"
                  - "cloudwatch:*"
                  - "cloudfront:*"
                  - "cloudformation:*"
                  - "lambda:*"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:AssignPrivateIpAddresses"
                  - "ec2:UnassignPrivateIpAddresses"
                  - "sns:*"
                  - "iam:*"
                  - "ses:*"
                  - "dynamodb:*"
                  - "cognito-identity:*"
                  - "cognito-idp:*"
                  - "rds:*"
                  - "ssm:GetParameter"
                  - "secretsmanager:*"
                Resource: "*"

  Rajuapidynamorole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "RajuapidynamorolePolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "dynamodb:*"
                  - "dax:*"
                  - "application-autoscaling:*"
                  - "cloudwatch:*"
                  - "datapipeline:*"
                  - "ec2:DescribeVpcs"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeSecurityGroups"
                  - "iam:*"
                  - "kms:*"
                  - "sns:*"
                  - "lambda:*"
                  - "resource-groups:*"
                  - "tag:GetResources"
                  - "kinesis:*"
                Resource: "*"

  RajuApiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "RajulambdaAuthPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "lambda:InvokeFunction"
                Resource: "*"

Outputs:
  RajuLambdaRoleARN:
    Value: !GetAtt RajuLambdaRole.Arn
    Export:
      Name: "RajuLambdaRoleArn::Id"

  RajuapidynamoroleARN:
    Value: !GetAtt Rajuapidynamorole.Arn
    Export:
      Name: "RajuapidynamoroleArn::Id"

  RajuApiLambdaRoleARN:
    Value: !GetAtt RajuApiLambdaRole.Arn
    Export:
      Name: "RajuApiLambdaRoleArn::Id"
